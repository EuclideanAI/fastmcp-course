Metadata-Version: 2.4
Name: confluence-fastmcp
Version: 0.1.0
Summary: A FastMCP server for Atlassian Confluence integration
Author-email: Your Name <your.email@example.com>
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastmcp>=0.5.0
Requires-Dist: atlassian-python-api>=3.41.3
Requires-Dist: httpx>=0.24.1
Requires-Dist: backoff>=2.2.1
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.3.1; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.3.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.3.0; extra == "dev"
Requires-Dist: ruff>=0.0.267; extra == "dev"

# Confluence FastMCP Server

A Model Context Protocol (MCP) server for interacting with Atlassian Confluence, built with Python and FastMCP.

## Description

This project implements an MCP server that provides AI assistants with tools to interact with Confluence. The server enables capabilities such as searching content, retrieving page information, creating and updating pages, and managing comments and labels.

## Features

- **Content Operations**: Search, retrieve, create, update, and delete Confluence pages
- **Navigation**: Get page children and ancestors for hierarchical navigation
- **Metadata Management**: Manage comments and labels
- **Space Management**: List and navigate Confluence spaces

## Development Setup

This project uses modern Python development tools to ensure code quality and consistency.

### Prerequisites

- Python 3.10+
- [uv](https://github.com/astral-sh/uv) - Fast Python package installer and resolver

### Setting Up Development Environment

1. Clone this repository:

   ```bash
   git clone <repository-url>
   cd fastmcp-course
   ```

2. Create a virtual environment using uv:

   ```bash
   uv venv
   ```

3. Activate the virtual environment:

   ```bash
   # On macOS/Linux
   source .venv/bin/activate

   # On Windows
   .\.venv\Scripts\activate
   ```

4. Install dependencies:

   ```bash
   # Install all dependencies including development tools
   uv pip install -e ".[dev]"

   # Or for production dependencies only
   uv pip install -e .

   # If you need to sync with the exact versions in uv.lock
   uv pip sync
   ```

5. Set up pre-commit hooks:
   ```bash
   pre-commit install
   ```

### Managing Dependencies with uv

This project uses uv.lock for reproducible environments. When dependencies change:

```bash
# After modifying pyproject.toml, update the lock file
uv pip compile pyproject.toml -o uv.lock

# To install packages based on the lock file exactly
uv pip sync
```

### Code Quality Standards

This project enforces the following standards:

- **Type Annotations**: All functions must have parameter and return type annotations
- **Code Formatting**: Black with 88 character line length
- **Import Sorting**: isort configured with Black compatibility
- **Linting**: Ruff for fast linting and error detection
- **Method Decoration**: Follow the patterns in `.github/prompts/decorating-methods.prompt.md` for FastMCP tools

### VS Code Integration

This repository includes VS Code settings that automatically configure:

- Format on save with Black
- Linting with Ruff
- Import organization with isort
- Type checking with mypy

Recommended extensions:

- Python (ms-python.python)
- Black Formatter (ms-python.black-formatter)
- Ruff (charliermarsh.ruff)
- Even Better TOML (tamasfe.even-better-toml)

## Requirements

- Python 3.10+
- Confluence instance (Cloud or Server)
- Confluence API credentials

## Installation

1. Clone this repository:

```
git clone <repository-url>
cd fastmcp-course
```

2. Install dependencies:

```bash
# Install with uv (recommended)
uv pip install -e .

# Or install with development dependencies
uv pip install -e ".[dev]"

# If you prefer pip instead of uv
pip install -e .
pip install -e ".[dev]"  # For development dependencies
```

## Configuration

Configure the application via environment variables:

```bash
export CONFLUENCE_URL="https://your-domain.atlassian.net"
export CONFLUENCE_USERNAME="your-email@example.com"
export CONFLUENCE_API_TOKEN="your-api-token"
# OR use a Personal Access Token (PAT) instead of username/api_token
# export CONFLUENCE_PAT="your-personal-access-token"
```

## Usage

Run the MCP server:

```bash
python server.py
```

Connect to the server from an MCP-compatible client such as Claude, GPT-4, or a custom application.

## MCP Tool Examples

### Search Confluence

```python
result = await search_confluence(
    query="project documentation",
    spaces=["DEV", "TEAM"],
    limit=5
)
```

### Get Page Content

```python
page = await get_page(page_id="123456789")
```

### Create a New Page

```python
new_page = await create_page(
    title="Meeting Notes",
    content="<p>Discussion points from today's meeting</p>",
    space_key="TEAM",
    parent_id="123456789"
)
```

### Add a Comment

```python
comment = await add_comment(
    page_id="123456789",
    content="Great document, thanks for sharing!"
)
```

## Project Structure

```
fastmcp-course/
├── server.py              # Main FastMCP server entry point
├── confluence/
│   ├── __init__.py        # Package initialization
│   ├── client.py          # Confluence client implementation
│   ├── models.py          # Data models for Confluence objects
│   └── utils.py           # Utility functions
├── tools/
│   ├── __init__.py        # Package initialization
│   ├── page_tools.py      # Tools for page operations
│   ├── search_tools.py    # Tools for search operations
│   └── comment_tools.py   # Tools for comment operations
├── config.py              # Configuration management
└── README.md              # Project documentation
```

## Error Handling

The server implements comprehensive error handling:

- API error handling with meaningful error messages
- Rate limiting awareness with backoff strategies
- Connection error recovery
- Detailed logging with configurable verbosity

## License

[Specify your license here]

## Contributing

[Specify contribution guidelines here]
