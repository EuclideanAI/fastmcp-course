name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync

      - name: Run tests with coverage
        run: uv run pytest

      - name: Update coverage badge (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          uv run python update_coverage_badge.py

      - name: Commit coverage badge update (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          if ! git diff --staged --quiet; then
            git commit -m "chore: update coverage badge [skip ci]"
            git push
          fi

      - name: Generate coverage summary for PR
        if: github.event_name == 'pull_request'
        id: coverage
        run: |
          # Get coverage percentage
          COVERAGE=$(python -c "
          import json
          with open('coverage.json') as f:
              data = json.load(f)
          print(int(data['totals']['percent_covered']))
          ")
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT

          # Get coverage details
          python -c "
          import json
          with open('coverage.json') as f:
              data = json.load(f)

          print('## ðŸ“Š Test Coverage Report')
          print()

          total = data['totals']
          percentage = int(total['percent_covered'])

          # Color coding
          if percentage >= 90:
              emoji = 'ðŸŸ¢'
          elif percentage >= 80:
              emoji = 'ðŸŸ¡'
          elif percentage >= 70:
              emoji = 'ðŸŸ¡'
          elif percentage >= 60:
              emoji = 'ðŸŸ '
          elif percentage >= 50:
              emoji = 'ðŸŸ '
          else:
              emoji = 'ðŸ”´'

          print(f'**Current Coverage: {emoji} {percentage}%**')
          print()
          print('| Metric | Value |')
          print('|--------|-------|')
          print(f'| Total Lines | {total[\"num_statements\"]} |')
          print(f'| Covered Lines | {total[\"covered_lines\"]} |')
          print(f'| Missing Lines | {total[\"missing_lines\"]} |')
          print(f'| Coverage | {percentage}% |')
          print()
          print('### Files with Low Coverage')
          print('| File | Coverage | Missing Lines |')
          print('|------|----------|---------------|')

          low_coverage_files = []
          for filename, file_data in data['files'].items():
              if ('test_' not in filename and
                  '__pycache__' not in filename and
                  '.egg-info' not in filename and
                  file_data['summary']['percent_covered'] < 80):

                  coverage_pct = int(file_data['summary']['percent_covered'])
                  missing = file_data['summary']['missing_lines']
                  low_coverage_files.append((filename, coverage_pct, missing))

          if low_coverage_files:
              for filename, coverage_pct, missing in sorted(low_coverage_files, key=lambda x: x[1]):
                  print(f'| {filename} | {coverage_pct}% | {missing} |')
          else:
              print('| *No files with coverage < 80%* | - | - |')

          print()
          print('> ðŸ’¡ Coverage badge will be automatically updated when this PR is merged to main.')
          " > coverage_summary.md

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = fs.readFileSync('coverage_summary.md', 'utf8');

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('ðŸ“Š Test Coverage Report') &&
              comment.user.login === 'github-actions[bot]'
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageSummary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageSummary
              });
            }
